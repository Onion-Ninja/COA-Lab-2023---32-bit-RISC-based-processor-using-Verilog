// 0. ldsp 1000(R0)
001010_00000_10000_0000001111101000
//4. ld R1, 0(R0)
001010_00000_00001_0000000000000000 
//8. push R1 
010000_10000_00000_0000000000000000

//12. ld R1, 4(R0)
001010_00000_00001_0000000000000100 
//16. push R1
010000_10000_00000_0000000000000000

//20. ld R1, 8(R0)
001010_00000_00001_0000000000001000
//24. push R1
010000_10000_00000_0000000000000000

//28. ld R1, 12(R0)
001010_00000_00001_0000000000001100 
//32. push R1
010000_10000_00000_0000000000000000

//36. ld R1, 16(R0)
001010_00000_00001_0000000000010000 
//40. push R1
010000_10000_00000_0000000000000000

//44. ld R1, 20(R0)
001010_00000_00001_0000000000010100 
//48. push R1
010000_10000_00000_0000000000000000

//52. ld R1, 24(R0)
001010_00000_00001_0000000000011000
//56. push R1
010000_10000_00000_0000000000000000

//60. ld R1, 28(R0)
001010_00000_00001_0000000000011100 
//64. push R1
010000_10000_00000_0000000000000000

//68. ld R1, 32(R0)
001010_00000_00001_0000000000100000 
//72. push R1
010000_10000_00000_0000000000000000

//76. ld R1, 36(R0)
001010_00000_00001_0000000000100100 
//80. push R1
010000_10000_00000_0000000000000000

//84. move R1, R0 
010100_00000_00001_00000_00000000000
//88. move R2, R0 
010100_00000_00010_00000_00000000000

//92. br out_loop (112-92=+20 offset )
001100_00000_000000000000000010100 

//swap
//96. st 0(R6), R9
001010_00110_01001_0000000000000000   
//100. st 0(R7), R8    
001010_00111_01000_0000000000000000 
//104. addi R2, R2, 1 
000001_00010_00010_0000000000000001
//108. br in_loop (132-108=+24 offset)
001100_00000_000000000000000011000 

//out_loop:
//112. subi R3, R1, 10
000010_00001_00011_0000000000001010
//116. bz R3, output (180-116=+64 offset)
001111_00011_000000000000001000000
//120. move R2, R0    
010100_00000_00010_00000_00000000000
//124. addi R1, R1, 1  
000001_00001_00001_0000000000000001
//128. br in_loop (+4 offset)
001100_00000_000000000000000000100

//in_loop:
//132. subi R4, R2, 9  
000010_00010_00100_0000000000001001
//136. bz R4, out_loop (offset 112-136=-24)
001111_00100_111111111111111101000
//140. srai R5, R2, 1
001000_00010_00101_0000000000000001
//144. srai R5, R5, 1
001000_00101_00101_0000000000000001
//148. add R6, SP, R5 
000000_10000_00101_00110_00000000000
//152. addi R7, R6, 4 
000001_00110_00111_0000000000000100
//156. ld R8, 0(R6)
001010_00110_01000_0000000000000000
//160. ld R9, 0(R7)
001010_00111_01001_0000000000000000
//164. sub R10, R9, R8 
000000_01001_01000_01010_00000000000
//168. bmi R10, swap (96-168=-72offset)
001100_01010_111111111111110111000
//172. addi R2, R2, 1 
000001_00010_00010_0000000000000001
//176. br in_loop (132-176=-44)
001100_00000_111111111111111010100

//output:
//180. halt
010101_00000000000000000000000000